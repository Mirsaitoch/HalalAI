//
//  EmptyChatView.swift
//  HalalAI
//
//  Created by –ú–∏—Ä—Å–∞–∏—Ç –°–∞–±–∏—Ä–∑—è–Ω–æ–≤ on 25.10.2025.
//

import SwiftUI

struct EmptyChatView: View {
    @State private var isAnimating = false
    @StateObject private var chatService = ChatService.shared
    
    var body: some View {
        VStack(spacing: 24) {
            Spacer()
            VStack(spacing: 16) {
                Text("–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º üëã")
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.primary)
                
                Text("–Ø ‚Äî HalalAI, –≤–∞—à —Ö–∞–ª—è–ª—å-–ø–æ–º–æ—â–Ω–∏–∫.")
                    .font(.headline)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                
                Text("–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –±—Ä–µ–Ω–¥–∞—Ö –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ö–∞–ª—è–ª—å.")
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 32)
            }
            Spacer()
            
            VStack(alignment: .leading, spacing: 12) {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack {
                        Spacer()
                        QuickQuestionButton(text: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–∞–ª—è–ª—å?", onTap: { chatService.sendMessage("–ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–∞–ª—è–ª—å?") })
                        QuickQuestionButton(text: "–•–∞–ª—è–ª—å –º—è—Å–æ", onTap: { chatService.sendMessage("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ö–∞–ª—è–ª—å –º—è—Å–µ") })
                        QuickQuestionButton(text: "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", onTap: { chatService.sendMessage("–ö–∞–∫–∏–µ –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ö–∞–ª—è–ª—å?") })
                        QuickQuestionButton(text: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—Ä–µ–Ω–¥—ã", onTap: { chatService.sendMessage("–ö–∞–∫–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ö–∞–ª—è–ª—å –±—Ä–µ–Ω–¥—ã?") })
                        Spacer()
                    }
                }
            }
        }
        .onAppear {
            isAnimating = true
        }
    }
}

struct QuickQuestionButton: View {
    let text: String
    let onTap: () -> Void
    @State private var isPressed = false
    
    var body: some View {
        Button(action: {
            HapticFeedback.light()
            onTap()
        }) {
            Text(text)
                .font(.caption)
                .foregroundColor(.darkGreen)
                .padding(.horizontal, 12)
                .padding(.vertical, 8)
                .background {
                    RoundedRectangle(cornerRadius: 16)
                        .fill(Color.greenForegroung)
                }
        }
        .scaleEffect(isPressed ? 0.95 : 1.0)
        .onLongPressGesture(minimumDuration: 0) {
            // –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–ª–≥–æ–º –Ω–∞–∂–∞—Ç–∏–∏
        } onPressingChanged: { pressing in
            isPressed = pressing
        }
    }
}

#Preview {
    EmptyChatView()
        .background(Color(.systemGroupedBackground))
}
